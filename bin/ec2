#!/usr/bin/env bash

set -f
set -o pipefail
set -o errexit
set -o nounset
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

get_ec2_ip_script="$(dirname $(realpath $0))/lib/get_ec2_ip"
get_ec2_id_script="$(dirname $(realpath $0))/lib/get_ec2_id"

: ${cache_folder:="${HOME}/.cache/ec2"}
: ${cache_file_name:="instance_describe"}
: ${cache_age_minutes:="30"}

function clear_cache_file() {
  if [[ "$use_cache" -eq 1 ]] && [[ -d "${cache_folder}" ]];then
    find "${cache_folder}" -name "${cache_file_name}" -delete
  fi
}

function get_cache_file() {
  if [[ "$use_cache" -eq 1 ]] && [[ -d "${cache_folder}" ]];then
    find "${cache_folder}" -name "${cache_file_name}" -mmin -${cache_age_minutes} -print -quit
  fi
}

function write_to_cache_file() {
  mkdir -p "${cache_folder}"
  cat > ${cache_folder}/${cache_file_name}
}

function log() {
  if [[ "$quiet" -ne 1 ]];then
    echo "$@" >&2
  fi
}

while getopts "hlqnv" options; do case $options in
  l) long_output=1 ;;
  q) quiet=1 ;;
  v) quiet=0 ;;
  n) use_cache=0 ;;
  h) exit ;;
esac; done; shift $((OPTIND - 1))

: ${quiet:=1}

: ${rc_file:="${HOME}/.ec2_rc"}
if [[ -r "${rc_file}" ]]; then
  log "found rc file: ${rc_file}"
  if ( cd $( dirname $(realpath "$rc_file")); git diff-index --quiet HEAD -- ) ; then
    source "${rc_file}"
  else
    echo "the rc file was either not in git or uncommitted changes found" >&2
    exit 1
  fi
fi

# set -a
: ${long_output:=0}
: ${use_cache:=1}
export long_output quiet use_cache

: ${trace:=0}
export trace

if [[ "$trace" -eq 1 ]];then
  PS4='${LINENO}: '
  set -x
fi

if [[ "$#" -eq 0 ]];then
  $0 list running

elif [[ "$1" == "create" ]];then shift
  if [[ "$#" -ge 2 ]];then
    log "create instance names from arguments: $@"
    echo "$@" | tr ' ' '\n' | parallel --no-run-if-empty  -j 200% "$0 create {} </dev/null"

  elif [[ -p /dev/stdin ]]; then
    log "create instance names from stdin"
    parallel --no-run-if-empty  -j 200% "$0 create {} </dev/null"

  else
    log "create one instance"
    instance_id="$( aws ec2 run-instances \
              --image-id "${AMI_ID}" \
              --key-name "${key_name}" \
              --instance-type "${instance_type}" \
              --security-groups "${security_group}" \
              --placement "${placement}" \
              --iam-instance-profile "Name=${role}" \
      | jq -M -r '.Instances[0].InstanceId'
    )"
              # ${role:+"--iam-instance-profile \"Name=${role}\""} \
    clear_cache_file
    if [[ "$#" -ge 1 ]] && [[ -n "$1" ]];then
      instance_name="$1"; shift
      $0 add-tag $instance_id $instance_name
      echo "created $instance_name: $instance_id"
    else
      echo "created: $instance_id"
    fi
  fi

elif [[ "$1" == "add-tag" ]];then shift
  if [[ "$#" -ge 2 ]];then
    instance_id="$($get_ec2_id_script $1)"
    tag_value="$2"
  elif [[ "$#" -eq 1 ]];then
    instance_id="$($get_ec2_id_script)"
    tag_value="$1"
  fi
  : ${tag_key:="Name"}
  aws ec2 create-tags \
    --resources ${instance_id} \
    --tags "Key=${tag_key},Value=${tag_value}"
  clear_cache_file

elif [[ "$1" == "delete-all" ]];then shift
  $0 list running \
    | jq -r 'map(.InstanceId)[]' \
    | $0 delete

elif [[ "$1" == "delete" ]];then shift
  if [[ "$#" -ge 2 ]];then
    log "delete instance names from arguments: $@"
    echo "$@" | tr ' ' '\n' | parallel --no-run-if-empty  -j 200% "$0 delete {} </dev/null"

  elif [[ -p /dev/stdin ]]; then
    log "delete instance names from stdin"
    parallel --no-run-if-empty -j 200% "$0 delete {} </dev/null"

  else
    aws ec2 terminate-instances --instance-ids "$($get_ec2_id_script $@)"
    clear_cache_file
  fi

elif [[ "$1" == "list" ]];then shift
  cache_file="$(get_cache_file)"
  if [[ -n "$cache_file" ]];then
    log "using cache file: $cache_file"
    raw_instance_description="$(cat $cache_file)"
  else
    raw_instance_description="$(aws ec2 describe-instances)"
    write_to_cache_file <<<"$raw_instance_description"
  fi

  instances_list="$(jq ".Reservations|map(.Instances[0])" \
    <<<"$raw_instance_description" )"
  if [[ $long_output -ne 1 ]];then
    instances_list="$(jq "map({\
          InstanceId\
          ,State:.State.Name\
          ,Name:(.Tags//[]|map(.Value?))[0]\
          ,PublicIpAddress\
          ,PrivateIpAddresses:(.NetworkInterfaces|map(.PrivateIpAddress))\
          })\
          |sort_by(.State)|reverse" \
          <<<"$instances_list")"
  fi
  if [[ "$#" -ge 1 ]] && [[ "$1" == "running" ]];then
    echo "$instances_list" \
      | jq 'map(select(.State=="running")|del(.State))|sort_by(.Name)'
  else
    echo "$instances_list" | jq .
  fi

elif [[ "$1" == "details" ]];then shift
  instance_id="$( $get_ec2_id_script $@ )"
  $0 list \
    | jq "map(select(.InstanceId==\"${instance_id}\"))[]"

elif [[ "$1" == "get-ip" ]];then shift
  $get_ec2_ip_script $@

elif [[ "$1" == "get-id" ]];then shift
  $get_ec2_id_script $@

elif [[ "$1" == "ssh" ]];then shift
  if [[ "$#" -ge 2 ]] && [[ -p /dev/stdin ]]; then
    input="$(cat)"
    echo "$@" | tr ' ' '\n' \
      | parallel --no-run-if-empty  -j 200% \
      "echo \"${input}\" | $0 ssh {}"

  else
    instance_ip="$( $get_ec2_ip_script $@ )"
    [[ "$#" -ge 1 ]] && { shift; }
    ssh \
      -q \
      -i ${private_key_location} \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no \
      -o ConnectTimeout=30 \
      -o ConnectionAttempts=50 \
      ec2-user@${instance_ip} \
      $@ \
    || true
  fi

elif [[ "$1" == "scp" ]];then shift
  instance_ip="$( $get_ec2_ip_script $1 )"; shift
  target_folder="$1"; shift
  scp \
    -q \
    -r \
    -i ${private_key_location} \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o ConnectTimeout=30 \
    -o ConnectionAttempts=50 \
    $@ \
    ec2-user@${instance_ip}:/home/ec2-user/${target_folder}

elif [[ "$1" == "port-list" ]];then shift
  ps --no-headers -C ssh -opid,cmd \
    | grep "ec2-user" \
    | grep "\-N \-L" \
    | sed \
      -e 's/-o UserKnownHostsFile=\/dev\/null //g' \
      -e 's/-o StrictHostKeyChecking=no //g' \
      -e 's/-o ConnectTimeout=30 //g' \
      -e 's/-o ConnectionAttempts=50 //g' \
      -e 's/-q -i [^ ]* //g' \
    || true

elif [[ "$1" == "port" ]];then shift
  instance_ip="$( $get_ec2_ip_script $1 )"; shift
  remote_port="$1"; shift
  local_port="${1-"${remote_port}"}"
  : ${remote_host:="127.0.0.1"}
  : ${local_host:="0.0.0.0"}
  echo "forward port from $instance_ip at ${remote_host}:${remote_port} to ${local_host}:${local_port}"
  ssh \
    -q \
    -i ${private_key_location} \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o ConnectTimeout=30 \
    -o ConnectionAttempts=50 \
    -N \
    -L ${local_host}:${local_port}:${remote_host}:${remote_port} \
    ec2-user@${instance_ip} & \
  disown

elif [[ "$1" == "ami-list" ]];then shift
  raw_ami_list="$( aws ec2 describe-images \
    --owners amazon \
    --filters \
    "Name=name,Values=amzn-ami-hvm-*" \
    "Name=description,Values=Amazon Linux AMI *" \
    "Name=creation-date,Values=2017*" \
    "Name=is-public,Values=true" \
    "Name=architecture,Values=x86_64" \
    "Name=root-device-type,Values=ebs" \
    "Name=virtualization-type,Values=hvm" \
    "Name=hypervisor,Values=xen" \
    "Name=state,Values=available" \
    "Name=image-type,Values=machine" \
    "Name=block-device-mapping.volume-type,Values=standard"
  )"
  if [[ "$long_output" -eq 1 ]];then
    echo "$raw_ami_list"
  else
    jq ".Images|map(\
      {Name,ImageId,State,ImageLocation,CreationDate,Description}\
      )|sort_by(.CreationDate)" \
      <<<"$raw_ami_list"
  fi

elif [[ "$1" == "ami-latest-id" ]];then shift
  raw_latest_ami="$( $0 -l ami-list \
    | jq -r -M '.Images | map(select(.Name|inside(".rc-")|not))|sort_by(.CreationDate)|reverse|.[0]'
  )"
  if [[ "$long_output" -eq 1 ]];then
    echo "$raw_latest_ami"
  else
    jq -r ".ImageId" <<<"$raw_latest_ami"
  fi

elif [[ "$1" == "network-list" ]];then
  aws ec2 describe-network-interfaces \
  | jq -M ".NetworkInterfaces\
|map({\
NetworkInterfaceId\
,PrivateIpAddress\
,Status\
,Attachment\
,AttachmentId:(.Attachment.AttachmentId)\
,AttachedInstanceId:(.Attachment.InstanceId)\
})\
"
elif [[ "$1" == "route53-set" ]];then
  aws route53 \
    change-resource-record-sets \
    --hosted-zone-id "$HOSTED_ZONE_ID" \
    --change-batch \
    "{\"Changes\":[{\"Action\":\"UPSERT\",\"ResourceRecordSet\":{\
\"Name\":\"${SUB_DOMAIN}\",\
\"Type\":\"A\",\
\"TTL\":60,\
\"ResourceRecords\":[{\"Value\":\"${PUBLIC_IP}\"}]\
}}]}"

elif [[ "$1" == "route53-list" ]];then
  aws route53 \
    list-resource-record-sets \
    --hosted-zone-id "$HOSTED_ZONE_ID" \
    --query "ResourceRecordSets[?Type == 'A']"

elif [[ "$1" == "network-add" ]];then shift
  instance_id="$( $get_ec2_id_script $@ )"
  interfaceid="$( aws ec2 create-network-interface \
          --subnet-id "${subnet_id}" \
          --groups "${security_group_id}" \
  | jq -M -r '.NetworkInterface.NetworkInterfaceId'
  )"
  attachmentid="$( aws ec2 attach-network-interface \
          --network-interface-id "$interfaceid" \
          --instance-id "$instance_id" \
          --device-index 1 \
  | jq -M -r '.AttachmentId'
  )"
  aws ec2 modify-network-interface-attribute \
          --network-interface-id "$interfaceid" \
          --attachment "AttachmentId=${attachmentid},DeleteOnTermination=true"

elif [[ "$1" == "network-create" ]];then
  aws ec2 create-network-interface \
          --subnet-id "${subnet_id}" \
          --groups "${security_group_id}" \
  | jq -M -r '.NetworkInterface.NetworkInterfaceId'

elif [[ "$1" == "network-attach" ]];then
  shift
  if [[ "$#" -ge 1 ]] && [[ -n "$1" ]];then
    interfaceid="$1";shift
  fi
  instance_id="$( $get_ec2_id_script $@ )"
  attachmentid="$( aws ec2 attach-network-interface \
          --network-interface-id "$interfaceid" \
          --instance-id "$instance_id" \
          --device-index 1
  | jq -M -r '.AttachmentId'
  )"
  aws ec2 modify-network-interface-attribute \
          --network-interface-id "$interfaceid" \
          --attachment "AttachmentId=${attachmentid},DeleteOnTermination=true"

elif [[ "$1" == "network-delete" ]];then
  shift;
  if [[ "$#" -ge 1 ]] && [[ -n "$1" ]];then
    interfaceid="$1";shift
  fi
  aws ec2 delete-network-interface \
          --network-interface-id "$interfaceid"

elif [[ "$1" == "billing" ]];then
  aws cloudwatch get-metric-statistics \
    --namespace "AWS/Billing" \
    --metric-name "EstimatedCharges" \
    --dimension "Name=ServiceName,Value=AmazonEC2" \
    --start-time $(date +"%Y-%m-%dT%H:%M:00" --date="-14 days") \
    --end-time $(date +"%Y-%m-%dT%H:%M:00") \
    --statistic Maximum \
    --period 3600

    # --output text
    # --dimension "Name=Currency,Value=USD" \
     # --output text | sort -r -k 3 | head -n 1 | cut -f 2

elif [[ "$1" == "group-list" ]];then
  aws ec2 describe-security-groups

elif [[ "$1" == "subnet-list" ]];then
  aws ec2 describe-subnets

elif [[ "$1" == "address-list" ]];then
  aws ec2 describe-addresses

elif [[ "$1" == "address-attach" ]];then
  shift
  instance_id="$( $get_ec2_id_script $@ )"
  aws ec2 associate-address \
            --instance-id "$instance_id" \
            --allocation-id "${address_allocation_id}" \
            --allow-reassociation

elif [[ "$1" == "metrics" ]];then
  aws cloudwatch get-metric-statistics \
    --namespace AWS/EC2 \
    --metric-name CPUUtilization \
    --dimensions "Name=InstanceId,Value=i-0a03275ee2de78ebb" \
    --statistics Maximum \
    --start-time "2017-06-11T00:00:00" \
    --end-time "2017-06-11T14:00:00" \
    --period 60

else
  echo "unkown command: $@" >&2
  exit 1

fi

